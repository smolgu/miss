// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	models.proto

It has these top-level messages:
	User
	Image
	Dialog
	Message
	Error
	Vote
	VkAuthRequest
	VkAuthReply
	UserRequest
	UserReply
	RandomRequest
	UsersReply
	VoteRequest
	VoteReply
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sex int32

const (
	Sex_Woman Sex = 0
	Sex_Man   Sex = 1
)

var Sex_name = map[int32]string{
	0: "Woman",
	1: "Man",
}
var Sex_value = map[string]int32{
	"Woman": 0,
	"Man":   1,
}

func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VoteType int32

const (
	VoteType_none    VoteType = 0
	VoteType_dislike VoteType = 1
	VoteType_like    VoteType = 2
)

var VoteType_name = map[int32]string{
	0: "none",
	1: "dislike",
	2: "like",
}
var VoteType_value = map[string]int32{
	"none":    0,
	"dislike": 1,
	"like":    2,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}
func (VoteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Error_ErrorCode int32

const (
	Error_good Error_ErrorCode = 0
)

var Error_ErrorCode_name = map[int32]string{
	0: "good",
}
var Error_ErrorCode_value = map[string]int32{
	"good": 0,
}

func (x Error_ErrorCode) String() string {
	return proto.EnumName(Error_ErrorCode_name, int32(x))
}
func (Error_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type User struct {
	Id              int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName       string   `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName        string   `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Sex             Sex      `protobuf:"varint,4,opt,name=sex,enum=models.Sex" json:"sex,omitempty"`
	GroupId         int64    `protobuf:"varint,5,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Images          []*Image `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	MessagesFromAll bool     `protobuf:"varint,7,opt,name=messages_from_all,json=messagesFromAll" json:"messages_from_all,omitempty"`
	Bio             string   `protobuf:"bytes,8,opt,name=bio" json:"bio,omitempty"`
	Rating          int64    `protobuf:"varint,9,opt,name=rating" json:"rating,omitempty"`
	Age             int64    `protobuf:"varint,10,opt,name=age" json:"age,omitempty"`
	VkId            int64    `protobuf:"varint,11,opt,name=vk_id,json=vkId" json:"vk_id,omitempty"`
	// inject_tag: xorm:"jsonb notnull default '{}' 'published_date'"
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

func (m *User) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *User) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *User) GetMessagesFromAll() bool {
	if m != nil {
		return m.MessagesFromAll
	}
	return false
}

func (m *User) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *User) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *User) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetVkId() int64 {
	if m != nil {
		return m.VkId
	}
	return 0
}

func (m *User) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Image struct {
	Url         string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Color       string `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	Hash        string `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
	HashVersion int64  `protobuf:"varint,4,opt,name=hash_version,json=hashVersion" json:"hash_version,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Image) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Image) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Image) GetHashVersion() int64 {
	if m != nil {
		return m.HashVersion
	}
	return 0
}

type Dialog struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Dialog) Reset()                    { *m = Dialog{} }
func (m *Dialog) String() string            { return proto.CompactTextString(m) }
func (*Dialog) ProtoMessage()               {}
func (*Dialog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Dialog) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Message struct {
	DialogId string `protobuf:"bytes,1,opt,name=dialog_id,json=dialogId" json:"dialog_id,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	SenderId int64  `protobuf:"varint,3,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetDialogId() string {
	if m != nil {
		return m.DialogId
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

type Error struct {
	HasError  bool            `protobuf:"varint,1,opt,name=has_error,json=hasError" json:"has_error,omitempty"`
	Error     string          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	ErrorCode Error_ErrorCode `protobuf:"varint,3,opt,name=error_code,json=errorCode,enum=models.Error_ErrorCode" json:"error_code,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetHasError() bool {
	if m != nil {
		return m.HasError
	}
	return false
}

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Error) GetErrorCode() Error_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return Error_good
}

type Vote struct {
	// @inject_tag: storm:"index"
	TargetUserId int64 `protobuf:"varint,1,opt,name=target_user_id,json=targetUserId" json:"target_user_id,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	VoteType VoteType `protobuf:"varint,2,opt,name=vote_type,json=voteType,enum=models.VoteType" json:"vote_type,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	VoterId int64 `protobuf:"varint,3,opt,name=voter_id,json=voterId" json:"voter_id,omitempty" storm:"index"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Vote) GetTargetUserId() int64 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

func (m *Vote) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_none
}

func (m *Vote) GetVoterId() int64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

type VkAuthRequest struct {
	VkToken string `protobuf:"bytes,1,opt,name=vk_token,json=vkToken" json:"vk_token,omitempty"`
}

func (m *VkAuthRequest) Reset()                    { *m = VkAuthRequest{} }
func (m *VkAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*VkAuthRequest) ProtoMessage()               {}
func (*VkAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VkAuthRequest) GetVkToken() string {
	if m != nil {
		return m.VkToken
	}
	return ""
}

type VkAuthReply struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *VkAuthReply) Reset()                    { *m = VkAuthReply{} }
func (m *VkAuthReply) String() string            { return proto.CompactTextString(m) }
func (*VkAuthReply) ProtoMessage()               {}
func (*VkAuthReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VkAuthReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *VkAuthReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VkAuthReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserReply struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RandomRequest struct {
	MinAge int64  `protobuf:"varint,1,opt,name=min_age,json=minAge" json:"min_age,omitempty"`
	MaxAge int64  `protobuf:"varint,2,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	Sex    Sex    `protobuf:"varint,3,opt,name=sex,enum=models.Sex" json:"sex,omitempty"`
	Token  string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *RandomRequest) Reset()                    { *m = RandomRequest{} }
func (m *RandomRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomRequest) ProtoMessage()               {}
func (*RandomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RandomRequest) GetMinAge() int64 {
	if m != nil {
		return m.MinAge
	}
	return 0
}

func (m *RandomRequest) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *RandomRequest) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

func (m *RandomRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UsersReply struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersReply) Reset()                    { *m = UsersReply{} }
func (m *UsersReply) String() string            { return proto.CompactTextString(m) }
func (*UsersReply) ProtoMessage()               {}
func (*UsersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UsersReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type VoteRequest struct {
	UserId   int64    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Token    string   `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	VoteType VoteType `protobuf:"varint,3,opt,name=vote_type,json=voteType,enum=models.VoteType" json:"vote_type,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VoteRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VoteRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VoteRequest) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_none
}

type VoteReply struct {
	Matched bool `protobuf:"varint,1,opt,name=matched" json:"matched,omitempty"`
}

func (m *VoteReply) Reset()                    { *m = VoteReply{} }
func (m *VoteReply) String() string            { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()               {}
func (*VoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VoteReply) GetMatched() bool {
	if m != nil {
		return m.Matched
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "models.User")
	proto.RegisterType((*Image)(nil), "models.Image")
	proto.RegisterType((*Dialog)(nil), "models.Dialog")
	proto.RegisterType((*Message)(nil), "models.Message")
	proto.RegisterType((*Error)(nil), "models.Error")
	proto.RegisterType((*Vote)(nil), "models.Vote")
	proto.RegisterType((*VkAuthRequest)(nil), "models.VkAuthRequest")
	proto.RegisterType((*VkAuthReply)(nil), "models.VkAuthReply")
	proto.RegisterType((*UserRequest)(nil), "models.UserRequest")
	proto.RegisterType((*UserReply)(nil), "models.UserReply")
	proto.RegisterType((*RandomRequest)(nil), "models.RandomRequest")
	proto.RegisterType((*UsersReply)(nil), "models.UsersReply")
	proto.RegisterType((*VoteRequest)(nil), "models.VoteRequest")
	proto.RegisterType((*VoteReply)(nil), "models.VoteReply")
	proto.RegisterEnum("models.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("models.VoteType", VoteType_name, VoteType_value)
	proto.RegisterEnum("models.Error_ErrorCode", Error_ErrorCode_name, Error_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Love service

type LoveClient interface {
	// Sends a greeting
	VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error)
	// User return user info by their id
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	// User return list of users
	RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error)
	// Vote vote for user
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
}

type loveClient struct {
	cc *grpc.ClientConn
}

func NewLoveClient(cc *grpc.ClientConn) LoveClient {
	return &loveClient{cc}
}

func (c *loveClient) VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error) {
	out := new(VkAuthReply)
	err := grpc.Invoke(ctx, "/models.Love/VkAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/models.Love/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error) {
	out := new(UsersReply)
	err := grpc.Invoke(ctx, "/models.Love/RandomUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/models.Love/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Love service

type LoveServer interface {
	// Sends a greeting
	VkAuth(context.Context, *VkAuthRequest) (*VkAuthReply, error)
	// User return user info by their id
	GetUser(context.Context, *UserRequest) (*User, error)
	// User return list of users
	RandomUsers(context.Context, *RandomRequest) (*UsersReply, error)
	// Vote vote for user
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
}

func RegisterLoveServer(s *grpc.Server, srv LoveServer) {
	s.RegisterService(&_Love_serviceDesc, srv)
}

func _Love_VkAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VkAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).VkAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/VkAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).VkAuth(ctx, req.(*VkAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_RandomUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).RandomUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/RandomUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).RandomUsers(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Love_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Love",
	HandlerType: (*LoveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VkAuth",
			Handler:    _Love_VkAuth_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Love_GetUser_Handler,
		},
		{
			MethodName: "RandomUsers",
			Handler:    _Love_RandomUsers_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Love_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}

func init() { proto.RegisterFile("models.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xaf, 0xe3, 0xfc, 0xb1, 0xc7, 0x69, 0x2e, 0xdd, 0xf6, 0xa8, 0x1b, 0xee, 0xb8, 0x60, 0xee,
	0x50, 0x54, 0x44, 0x02, 0x41, 0x42, 0xe2, 0xb1, 0xe2, 0x9f, 0x22, 0x51, 0x1e, 0x7c, 0xa5, 0x27,
	0x9e, 0xac, 0x6d, 0xbd, 0x71, 0x4c, 0x6c, 0x6f, 0xf0, 0x6e, 0xac, 0x54, 0x88, 0x17, 0xde, 0x78,
	0xe6, 0xa3, 0x21, 0xbe, 0x01, 0x6f, 0x7c, 0x09, 0x34, 0xbb, 0xeb, 0x9e, 0x03, 0x3a, 0xf5, 0xe5,
	0x5e, 0xda, 0x99, 0xdf, 0x8c, 0x67, 0x7e, 0xfb, 0x9b, 0xd9, 0x0d, 0xf4, 0x73, 0x1e, 0xb3, 0x4c,
	0x4c, 0x37, 0x25, 0x97, 0x9c, 0x74, 0xb5, 0x37, 0x7a, 0x92, 0x70, 0x9e, 0x64, 0x6c, 0x46, 0x37,
	0xe9, 0x8c, 0x16, 0x05, 0x97, 0x54, 0xa6, 0xbc, 0x30, 0x59, 0xa3, 0x67, 0x26, 0xaa, 0xbc, 0x9b,
	0xed, 0x72, 0x26, 0xd3, 0x9c, 0x09, 0x49, 0xf3, 0x8d, 0x4e, 0x08, 0xfe, 0x69, 0x41, 0xfb, 0x07,
	0xc1, 0x4a, 0x32, 0x80, 0x56, 0x1a, 0xfb, 0xd6, 0xd8, 0x9a, 0xd8, 0x61, 0x2b, 0x8d, 0xc9, 0x53,
	0x80, 0x65, 0x5a, 0x0a, 0x19, 0x15, 0x34, 0x67, 0x7e, 0x6b, 0x6c, 0x4d, 0xdc, 0xd0, 0x55, 0xc8,
	0xf7, 0x34, 0x67, 0xe4, 0x5d, 0x70, 0x33, 0x5a, 0x47, 0x6d, 0x15, 0x75, 0x10, 0x50, 0xc1, 0xa7,
	0x60, 0x0b, 0xb6, 0xf3, 0xdb, 0x63, 0x6b, 0x32, 0x98, 0x7b, 0x53, 0xc3, 0xfb, 0x25, 0xdb, 0x85,
	0x88, 0x93, 0x33, 0x70, 0x92, 0x92, 0x6f, 0x37, 0x51, 0x1a, 0xfb, 0x1d, 0xd5, 0xb0, 0xa7, 0xfc,
	0x45, 0x4c, 0x5e, 0x40, 0x37, 0xcd, 0x69, 0xc2, 0x84, 0xdf, 0x1d, 0xdb, 0x13, 0x6f, 0x7e, 0x58,
	0x7f, 0xbc, 0x40, 0x34, 0x34, 0x41, 0x72, 0x0e, 0x47, 0x39, 0x13, 0x02, 0xed, 0x68, 0x59, 0xf2,
	0x3c, 0xa2, 0x59, 0xe6, 0xf7, 0xc6, 0xd6, 0xc4, 0x09, 0x1f, 0xd5, 0x81, 0x6f, 0x4a, 0x9e, 0x5f,
	0x64, 0x19, 0x19, 0x82, 0x7d, 0x93, 0x72, 0xdf, 0x51, 0x1c, 0xd1, 0x24, 0xef, 0x40, 0xb7, 0xa4,
	0x32, 0x2d, 0x12, 0xdf, 0x55, 0xdd, 0x8d, 0x87, 0x99, 0x34, 0x61, 0x3e, 0x28, 0x10, 0x4d, 0x72,
	0x0c, 0x9d, 0x6a, 0x8d, 0x34, 0x3d, 0x85, 0xb5, 0xab, 0xf5, 0x22, 0x26, 0x5f, 0x00, 0xdc, 0x96,
	0x8c, 0x4a, 0x16, 0x47, 0x54, 0xfa, 0xfd, 0xb1, 0x35, 0xf1, 0xe6, 0xa3, 0xa9, 0x16, 0x7a, 0x5a,
	0x0b, 0x3d, 0xbd, 0xaa, 0x85, 0x0e, 0x5d, 0x93, 0x7d, 0x21, 0x83, 0x25, 0x74, 0xd4, 0x41, 0xb0,
	0xd5, 0xb6, 0xcc, 0x94, 0xdc, 0x6e, 0x88, 0x26, 0x39, 0x81, 0xce, 0x2d, 0xcf, 0x78, 0x69, 0xa4,
	0xd6, 0x0e, 0x21, 0xd0, 0x5e, 0x51, 0xb1, 0x32, 0x0a, 0x2b, 0x9b, 0xbc, 0x0f, 0x7d, 0xfc, 0x1f,
	0x55, 0xac, 0x14, 0x29, 0x2f, 0x94, 0xcc, 0x76, 0xe8, 0x21, 0x76, 0xad, 0xa1, 0xc0, 0x87, 0xee,
	0x57, 0x29, 0xcd, 0x78, 0xd2, 0x18, 0xab, 0x8b, 0x63, 0x0d, 0x5e, 0x41, 0xef, 0x52, 0x0b, 0x84,
	0x23, 0x8c, 0x55, 0x52, 0x74, 0x9f, 0xe1, 0x68, 0x60, 0x11, 0x63, 0x63, 0xc9, 0x76, 0xd2, 0xb0,
	0x51, 0x36, 0x7e, 0x20, 0x58, 0x11, 0xb3, 0x12, 0x3f, 0xb0, 0x55, 0x57, 0x47, 0x03, 0x8b, 0x38,
	0xf8, 0xdd, 0x82, 0xce, 0xd7, 0x65, 0xc9, 0x4b, 0x4c, 0x5b, 0x51, 0x11, 0x31, 0x74, 0x54, 0x5d,
	0x27, 0x74, 0x56, 0x54, 0xe8, 0xe0, 0x09, 0x74, 0x74, 0xc0, 0x1c, 0x53, 0x39, 0xe4, 0x73, 0x00,
	0x65, 0x44, 0xb7, 0x3c, 0xd6, 0xeb, 0x34, 0x98, 0x9f, 0xd6, 0xa3, 0x57, 0x1f, 0xea, 0xbf, 0x5f,
	0xf2, 0x98, 0x85, 0x2e, 0xab, 0xcd, 0xe0, 0x31, 0xb8, 0xf7, 0x38, 0x71, 0xa0, 0x9d, 0x70, 0x1e,
	0x0f, 0x0f, 0x82, 0x0a, 0xda, 0xd7, 0x5c, 0x32, 0xf2, 0x1c, 0x06, 0x92, 0x96, 0x09, 0x93, 0xd1,
	0x56, 0x68, 0xd6, 0x7a, 0xbf, 0xfb, 0x1a, 0xc5, 0xbd, 0x5f, 0xc4, 0xe4, 0x63, 0x70, 0x2b, 0x2e,
	0x59, 0x24, 0xef, 0x36, 0x7a, 0xd1, 0x07, 0xf3, 0x61, 0xdd, 0x1b, 0xcb, 0x5c, 0xdd, 0x6d, 0x58,
	0xe8, 0x54, 0xc6, 0xc2, 0xed, 0x45, 0xbb, 0x21, 0x42, 0x4f, 0xf9, 0x8b, 0x38, 0x38, 0x87, 0xc3,
	0xeb, 0xf5, 0xc5, 0x56, 0xae, 0x42, 0xf6, 0xf3, 0x96, 0x09, 0xa9, 0x72, 0xd7, 0x91, 0xe4, 0x6b,
	0x56, 0x18, 0x85, 0x7b, 0xd5, 0xfa, 0x0a, 0xdd, 0xe0, 0x27, 0xf0, 0xea, 0xdc, 0x4d, 0x76, 0x47,
	0xc6, 0xd0, 0x46, 0x8e, 0x2a, 0xcb, 0x9b, 0xf7, 0xeb, 0xfe, 0x48, 0x31, 0x54, 0x11, 0xf2, 0x41,
	0x53, 0xb9, 0xc6, 0xcd, 0x50, 0x02, 0xd4, 0x42, 0x9e, 0x40, 0x47, 0x77, 0xd3, 0x0b, 0xa3, 0x9d,
	0xe0, 0x43, 0xf0, 0x54, 0x21, 0xc3, 0xea, 0x14, 0x7a, 0xfb, 0x7a, 0x74, 0xb7, 0x4a, 0x89, 0x20,
	0x04, 0x57, 0xe7, 0xbd, 0x3d, 0x46, 0x41, 0x05, 0x87, 0x21, 0x2d, 0x62, 0x9e, 0x37, 0xba, 0xe7,
	0x69, 0x11, 0xe1, 0x4d, 0x33, 0xdd, 0xf3, 0xb4, 0xb8, 0x48, 0x98, 0x0a, 0xd0, 0x9d, 0x0a, 0xb4,
	0x4c, 0x80, 0xee, 0x30, 0x60, 0x9e, 0x13, 0xfb, 0x0d, 0xcf, 0xc9, 0xfd, 0x99, 0xdb, 0xcd, 0x33,
	0x7f, 0x02, 0x80, 0x54, 0x85, 0x3e, 0x4c, 0x00, 0x1d, 0xa4, 0x2c, 0x7c, 0x4b, 0x3d, 0x2b, 0xfb,
	0xa7, 0xd1, 0xa1, 0x60, 0x0d, 0x1e, 0x8e, 0xfb, 0x21, 0x95, 0x5e, 0xf7, 0x6b, 0x35, 0xfa, 0xed,
	0x6f, 0x91, 0xfd, 0xd0, 0x16, 0x05, 0x2f, 0xc0, 0xd5, 0xcd, 0x90, 0x9d, 0x8f, 0x27, 0x97, 0xb7,
	0x2b, 0x16, 0x9b, 0xfb, 0x52, 0xbb, 0xe7, 0x67, 0x60, 0xbf, 0x64, 0x3b, 0xe2, 0x42, 0xe7, 0x15,
	0xcf, 0x69, 0x31, 0x3c, 0x20, 0x3d, 0xb0, 0x2f, 0x69, 0x31, 0xb4, 0xce, 0x3f, 0x02, 0xa7, 0xae,
	0x8b, 0xab, 0x5f, 0xf0, 0x82, 0x0d, 0x0f, 0x88, 0x07, 0xbd, 0x38, 0x15, 0x59, 0xba, 0x66, 0x43,
	0x0b, 0x61, 0x65, 0xb5, 0xe6, 0x7f, 0xb5, 0xa0, 0xfd, 0x1d, 0xaf, 0x18, 0xb9, 0x84, 0xae, 0x5e,
	0x3b, 0xf2, 0xf8, 0x9e, 0x5d, 0x73, 0x65, 0x47, 0xc7, 0xff, 0x85, 0x37, 0xd9, 0x5d, 0x70, 0xfa,
	0xdb, 0x9f, 0x7f, 0xff, 0xd1, 0x3a, 0x22, 0x8f, 0xd4, 0xcf, 0x4c, 0xf5, 0xe9, 0x8c, 0x6e, 0xe5,
	0x6a, 0x56, 0xad, 0xc9, 0x25, 0xf4, 0xbe, 0xd5, 0x17, 0x89, 0x1c, 0xef, 0x69, 0x6a, 0xaa, 0xed,
	0x09, 0x1d, 0x3c, 0x53, 0x65, 0xce, 0xc8, 0x69, 0x5d, 0x46, 0x09, 0x3f, 0xfb, 0xc5, 0xe8, 0xfc,
	0x2b, 0xf9, 0x11, 0x3c, 0xbd, 0x2c, 0x6a, 0x74, 0xaf, 0x29, 0xee, 0x6d, 0xd0, 0x88, 0x34, 0x8b,
	0xea, 0x01, 0xff, 0xbf, 0x74, 0xc5, 0xf1, 0x4d, 0xc7, 0x1f, 0xbe, 0x65, 0x9a, 0x31, 0x41, 0xae,
	0xcc, 0x9b, 0x70, 0xdc, 0x1c, 0x4a, 0x5d, 0xf1, 0x68, 0x1f, 0xc4, 0x82, 0xcf, 0x55, 0xc1, 0xf7,
	0x82, 0x27, 0x6f, 0xe0, 0x8a, 0x0d, 0xd8, 0x4d, 0x57, 0xbd, 0xf7, 0x9f, 0xfd, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x59, 0x1e, 0x61, 0xfd, 0x9c, 0x07, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: models.proto

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		models.proto

	It has these top-level messages:
		User
		Image
		Dialog
		Message
		Error
		VkAuthRequest
		VkAuthReply
		UserRequest
		UserReply
		RandomRequest
		UsersReply
		VoteRequest
		VoteReply
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sex int32

const (
	Sex_Woman Sex = 0
	Sex_Man   Sex = 1
)

var Sex_name = map[int32]string{
	0: "Woman",
	1: "Man",
}
var Sex_value = map[string]int32{
	"Woman": 0,
	"Man":   1,
}

func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

type Error_ErrorCode int32

const (
	Error_good Error_ErrorCode = 0
)

var Error_ErrorCode_name = map[int32]string{
	0: "good",
}
var Error_ErrorCode_value = map[string]int32{
	"good": 0,
}

func (x Error_ErrorCode) String() string {
	return proto.EnumName(Error_ErrorCode_name, int32(x))
}
func (Error_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{4, 0} }

type VoteRequest_VoteType int32

const (
	VoteRequest_none    VoteRequest_VoteType = 0
	VoteRequest_dislike VoteRequest_VoteType = 1
	VoteRequest_like    VoteRequest_VoteType = 2
)

var VoteRequest_VoteType_name = map[int32]string{
	0: "none",
	1: "dislike",
	2: "like",
}
var VoteRequest_VoteType_value = map[string]int32{
	"none":    0,
	"dislike": 1,
	"like":    2,
}

func (x VoteRequest_VoteType) String() string {
	return proto.EnumName(VoteRequest_VoteType_name, int32(x))
}
func (VoteRequest_VoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorModels, []int{11, 0}
}

type User struct {
	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName       string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Sex             Sex      `protobuf:"varint,4,opt,name=sex,proto3,enum=models.Sex" json:"sex,omitempty"`
	GroupId         int64    `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Images          []*Image `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	MessagesFromAll bool     `protobuf:"varint,7,opt,name=messages_from_all,json=messagesFromAll,proto3" json:"messages_from_all,omitempty"`
	Bio             string   `protobuf:"bytes,8,opt,name=bio,proto3" json:"bio,omitempty"`
	Rating          int64    `protobuf:"varint,9,opt,name=rating,proto3" json:"rating,omitempty"`
	Age             int64    `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`
	VkId            int64    `protobuf:"varint,11,opt,name=vk_id,json=vkId,proto3" json:"vk_id,omitempty"`
	// inject_tag: xorm:"jsonb notnull default '{}' 'published_date'"
	CreatedAt time.Time `protobuf:"bytes,12,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

func (m *User) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *User) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *User) GetMessagesFromAll() bool {
	if m != nil {
		return m.MessagesFromAll
	}
	return false
}

func (m *User) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *User) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *User) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetVkId() int64 {
	if m != nil {
		return m.VkId
	}
	return 0
}

func (m *User) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type Image struct {
	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Color       string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Hash        string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	HashVersion int64  `protobuf:"varint,4,opt,name=hash_version,json=hashVersion,proto3" json:"hash_version,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Image) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Image) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Image) GetHashVersion() int64 {
	if m != nil {
		return m.HashVersion
	}
	return 0
}

type Dialog struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Dialog) Reset()                    { *m = Dialog{} }
func (m *Dialog) String() string            { return proto.CompactTextString(m) }
func (*Dialog) ProtoMessage()               {}
func (*Dialog) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{2} }

func (m *Dialog) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Message struct {
	DialogId string `protobuf:"bytes,1,opt,name=dialog_id,json=dialogId,proto3" json:"dialog_id,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	SenderId int64  `protobuf:"varint,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{3} }

func (m *Message) GetDialogId() string {
	if m != nil {
		return m.DialogId
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

type Error struct {
	HasError  bool            `protobuf:"varint,1,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	Error     string          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode Error_ErrorCode `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=models.Error_ErrorCode" json:"error_code,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{4} }

func (m *Error) GetHasError() bool {
	if m != nil {
		return m.HasError
	}
	return false
}

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Error) GetErrorCode() Error_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return Error_good
}

type VkAuthRequest struct {
	VkToken string `protobuf:"bytes,1,opt,name=vk_token,json=vkToken,proto3" json:"vk_token,omitempty"`
}

func (m *VkAuthRequest) Reset()                    { *m = VkAuthRequest{} }
func (m *VkAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*VkAuthRequest) ProtoMessage()               {}
func (*VkAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{5} }

func (m *VkAuthRequest) GetVkToken() string {
	if m != nil {
		return m.VkToken
	}
	return ""
}

type VkAuthReply struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *VkAuthReply) Reset()                    { *m = VkAuthReply{} }
func (m *VkAuthReply) String() string            { return proto.CompactTextString(m) }
func (*VkAuthReply) ProtoMessage()               {}
func (*VkAuthReply) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{6} }

func (m *VkAuthReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *VkAuthReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VkAuthReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{7} }

func (m *UserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserReply struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{8} }

func (m *UserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RandomRequest struct {
	MinAge int64 `protobuf:"varint,1,opt,name=min_age,json=minAge,proto3" json:"min_age,omitempty"`
	MaxAge int64 `protobuf:"varint,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	Sex    Sex   `protobuf:"varint,3,opt,name=sex,proto3,enum=models.Sex" json:"sex,omitempty"`
}

func (m *RandomRequest) Reset()                    { *m = RandomRequest{} }
func (m *RandomRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomRequest) ProtoMessage()               {}
func (*RandomRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{9} }

func (m *RandomRequest) GetMinAge() int64 {
	if m != nil {
		return m.MinAge
	}
	return 0
}

func (m *RandomRequest) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *RandomRequest) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

type UsersReply struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersReply) Reset()                    { *m = UsersReply{} }
func (m *UsersReply) String() string            { return proto.CompactTextString(m) }
func (*UsersReply) ProtoMessage()               {}
func (*UsersReply) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{10} }

func (m *UsersReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type VoteRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{11} }

func (m *VoteRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type VoteReply struct {
}

func (m *VoteReply) Reset()                    { *m = VoteReply{} }
func (m *VoteReply) String() string            { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()               {}
func (*VoteReply) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{12} }

func init() {
	proto.RegisterType((*User)(nil), "models.User")
	proto.RegisterType((*Image)(nil), "models.Image")
	proto.RegisterType((*Dialog)(nil), "models.Dialog")
	proto.RegisterType((*Message)(nil), "models.Message")
	proto.RegisterType((*Error)(nil), "models.Error")
	proto.RegisterType((*VkAuthRequest)(nil), "models.VkAuthRequest")
	proto.RegisterType((*VkAuthReply)(nil), "models.VkAuthReply")
	proto.RegisterType((*UserRequest)(nil), "models.UserRequest")
	proto.RegisterType((*UserReply)(nil), "models.UserReply")
	proto.RegisterType((*RandomRequest)(nil), "models.RandomRequest")
	proto.RegisterType((*UsersReply)(nil), "models.UsersReply")
	proto.RegisterType((*VoteRequest)(nil), "models.VoteRequest")
	proto.RegisterType((*VoteReply)(nil), "models.VoteReply")
	proto.RegisterEnum("models.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("models.Error_ErrorCode", Error_ErrorCode_name, Error_ErrorCode_value)
	proto.RegisterEnum("models.VoteRequest_VoteType", VoteRequest_VoteType_name, VoteRequest_VoteType_value)
}
func (this *User) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *User")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *User but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *User but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.FirstName != that1.FirstName {
		return fmt.Errorf("FirstName this(%v) Not Equal that(%v)", this.FirstName, that1.FirstName)
	}
	if this.LastName != that1.LastName {
		return fmt.Errorf("LastName this(%v) Not Equal that(%v)", this.LastName, that1.LastName)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.GroupId != that1.GroupId {
		return fmt.Errorf("GroupId this(%v) Not Equal that(%v)", this.GroupId, that1.GroupId)
	}
	if len(this.Images) != len(that1.Images) {
		return fmt.Errorf("Images this(%v) Not Equal that(%v)", len(this.Images), len(that1.Images))
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return fmt.Errorf("Images this[%v](%v) Not Equal that[%v](%v)", i, this.Images[i], i, that1.Images[i])
		}
	}
	if this.MessagesFromAll != that1.MessagesFromAll {
		return fmt.Errorf("MessagesFromAll this(%v) Not Equal that(%v)", this.MessagesFromAll, that1.MessagesFromAll)
	}
	if this.Bio != that1.Bio {
		return fmt.Errorf("Bio this(%v) Not Equal that(%v)", this.Bio, that1.Bio)
	}
	if this.Rating != that1.Rating {
		return fmt.Errorf("Rating this(%v) Not Equal that(%v)", this.Rating, that1.Rating)
	}
	if this.Age != that1.Age {
		return fmt.Errorf("Age this(%v) Not Equal that(%v)", this.Age, that1.Age)
	}
	if this.VkId != that1.VkId {
		return fmt.Errorf("VkId this(%v) Not Equal that(%v)", this.VkId, that1.VkId)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	return nil
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.MessagesFromAll != that1.MessagesFromAll {
		return false
	}
	if this.Bio != that1.Bio {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.VkId != that1.VkId {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Image but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if this.Color != that1.Color {
		return fmt.Errorf("Color this(%v) Not Equal that(%v)", this.Color, that1.Color)
	}
	if this.Hash != that1.Hash {
		return fmt.Errorf("Hash this(%v) Not Equal that(%v)", this.Hash, that1.Hash)
	}
	if this.HashVersion != that1.HashVersion {
		return fmt.Errorf("HashVersion this(%v) Not Equal that(%v)", this.HashVersion, that1.HashVersion)
	}
	return nil
}
func (this *Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Color != that1.Color {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.HashVersion != that1.HashVersion {
		return false
	}
	return true
}
func (this *Dialog) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dialog)
	if !ok {
		that2, ok := that.(Dialog)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dialog")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dialog but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dialog but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	return nil
}
func (this *Dialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dialog)
	if !ok {
		that2, ok := that.(Dialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if this.DialogId != that1.DialogId {
		return fmt.Errorf("DialogId this(%v) Not Equal that(%v)", this.DialogId, that1.DialogId)
	}
	if this.Text != that1.Text {
		return fmt.Errorf("Text this(%v) Not Equal that(%v)", this.Text, that1.Text)
	}
	if this.SenderId != that1.SenderId {
		return fmt.Errorf("SenderId this(%v) Not Equal that(%v)", this.SenderId, that1.SenderId)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DialogId != that1.DialogId {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	return true
}
func (this *Error) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Error")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Error but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Error but is not nil && this == nil")
	}
	if this.HasError != that1.HasError {
		return fmt.Errorf("HasError this(%v) Not Equal that(%v)", this.HasError, that1.HasError)
	}
	if this.Error != that1.Error {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if this.ErrorCode != that1.ErrorCode {
		return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", this.ErrorCode, that1.ErrorCode)
	}
	return nil
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HasError != that1.HasError {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	return true
}
func (this *VkAuthRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VkAuthRequest)
	if !ok {
		that2, ok := that.(VkAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VkAuthRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VkAuthRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VkAuthRequest but is not nil && this == nil")
	}
	if this.VkToken != that1.VkToken {
		return fmt.Errorf("VkToken this(%v) Not Equal that(%v)", this.VkToken, that1.VkToken)
	}
	return nil
}
func (this *VkAuthRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VkAuthRequest)
	if !ok {
		that2, ok := that.(VkAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VkToken != that1.VkToken {
		return false
	}
	return true
}
func (this *VkAuthReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VkAuthReply)
	if !ok {
		that2, ok := that.(VkAuthReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VkAuthReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VkAuthReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VkAuthReply but is not nil && this == nil")
	}
	if !this.User.Equal(that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if this.Token != that1.Token {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	return nil
}
func (this *VkAuthReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VkAuthReply)
	if !ok {
		that2, ok := that.(VkAuthReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *UserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRequest)
	if !ok {
		that2, ok := that.(UserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRequest but is not nil && this == nil")
	}
	if this.UserId != that1.UserId {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	return nil
}
func (this *UserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRequest)
	if !ok {
		that2, ok := that.(UserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *UserReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserReply)
	if !ok {
		that2, ok := that.(UserReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserReply but is not nil && this == nil")
	}
	if !this.User.Equal(that1.User) {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *UserReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserReply)
	if !ok {
		that2, ok := that.(UserReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *RandomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RandomRequest)
	if !ok {
		that2, ok := that.(RandomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RandomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RandomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RandomRequest but is not nil && this == nil")
	}
	if this.MinAge != that1.MinAge {
		return fmt.Errorf("MinAge this(%v) Not Equal that(%v)", this.MinAge, that1.MinAge)
	}
	if this.MaxAge != that1.MaxAge {
		return fmt.Errorf("MaxAge this(%v) Not Equal that(%v)", this.MaxAge, that1.MaxAge)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	return nil
}
func (this *RandomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RandomRequest)
	if !ok {
		that2, ok := that.(RandomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinAge != that1.MinAge {
		return false
	}
	if this.MaxAge != that1.MaxAge {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *UsersReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UsersReply)
	if !ok {
		that2, ok := that.(UsersReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UsersReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UsersReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UsersReply but is not nil && this == nil")
	}
	if len(this.Users) != len(that1.Users) {
		return fmt.Errorf("Users this(%v) Not Equal that(%v)", len(this.Users), len(that1.Users))
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return fmt.Errorf("Users this[%v](%v) Not Equal that[%v](%v)", i, this.Users[i], i, that1.Users[i])
		}
	}
	return nil
}
func (this *UsersReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsersReply)
	if !ok {
		that2, ok := that.(UsersReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *VoteRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VoteRequest)
	if !ok {
		that2, ok := that.(VoteRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VoteRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VoteRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VoteRequest but is not nil && this == nil")
	}
	if this.UserId != that1.UserId {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	return nil
}
func (this *VoteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoteRequest)
	if !ok {
		that2, ok := that.(VoteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *VoteReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VoteReply)
	if !ok {
		that2, ok := that.(VoteReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VoteReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VoteReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VoteReply but is not nil && this == nil")
	}
	return nil
}
func (this *VoteReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoteReply)
	if !ok {
		that2, ok := that.(VoteReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&models.User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "MessagesFromAll: "+fmt.Sprintf("%#v", this.MessagesFromAll)+",\n")
	s = append(s, "Bio: "+fmt.Sprintf("%#v", this.Bio)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "VkId: "+fmt.Sprintf("%#v", this.VkId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.Image{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "HashVersion: "+fmt.Sprintf("%#v", this.HashVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.Dialog{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.Message{")
	s = append(s, "DialogId: "+fmt.Sprintf("%#v", this.DialogId)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.Error{")
	s = append(s, "HasError: "+fmt.Sprintf("%#v", this.HasError)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VkAuthRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VkAuthRequest{")
	s = append(s, "VkToken: "+fmt.Sprintf("%#v", this.VkToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VkAuthReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.VkAuthReply{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.UserRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.UserReply{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RandomRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.RandomRequest{")
	s = append(s, "MinAge: "+fmt.Sprintf("%#v", this.MinAge)+",\n")
	s = append(s, "MaxAge: "+fmt.Sprintf("%#v", this.MaxAge)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UsersReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.UsersReply{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VoteRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&models.VoteReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModels(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Love service

type LoveClient interface {
	// Sends a greeting
	VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error)
	// User return user info by their id
	User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
	// User return list of users
	RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error)
	// Vote vote for user
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
}

type loveClient struct {
	cc *grpc.ClientConn
}

func NewLoveClient(cc *grpc.ClientConn) LoveClient {
	return &loveClient{cc}
}

func (c *loveClient) VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error) {
	out := new(VkAuthReply)
	err := grpc.Invoke(ctx, "/models.Love/VkAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/models.Love/User", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error) {
	out := new(UsersReply)
	err := grpc.Invoke(ctx, "/models.Love/RandomUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/models.Love/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Love service

type LoveServer interface {
	// Sends a greeting
	VkAuth(context.Context, *VkAuthRequest) (*VkAuthReply, error)
	// User return user info by their id
	User(context.Context, *UserRequest) (*UserReply, error)
	// User return list of users
	RandomUsers(context.Context, *RandomRequest) (*UsersReply, error)
	// Vote vote for user
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
}

func RegisterLoveServer(s *grpc.Server, srv LoveServer) {
	s.RegisterService(&_Love_serviceDesc, srv)
}

func _Love_VkAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VkAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).VkAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/VkAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).VkAuth(ctx, req.(*VkAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).User(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_RandomUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).RandomUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/RandomUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).RandomUsers(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Love_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Love",
	HandlerType: (*LoveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VkAuth",
			Handler:    _Love_VkAuth_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Love_User_Handler,
		},
		{
			MethodName: "RandomUsers",
			Handler:    _Love_RandomUsers_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Love_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}

func NewPopulatedUser(r randyModels, easy bool) *User {
	this := &User{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.FirstName = string(randStringModels(r))
	this.LastName = string(randStringModels(r))
	this.Sex = Sex([]int32{0, 1}[r.Intn(2)])
	this.GroupId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GroupId *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Images = make([]*Image, v1)
		for i := 0; i < v1; i++ {
			this.Images[i] = NewPopulatedImage(r, easy)
		}
	}
	this.MessagesFromAll = bool(bool(r.Intn(2) == 0))
	this.Bio = string(randStringModels(r))
	this.Rating = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Rating *= -1
	}
	this.Age = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Age *= -1
	}
	this.VkId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.VkId *= -1
	}
	v2 := types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImage(r randyModels, easy bool) *Image {
	this := &Image{}
	this.Url = string(randStringModels(r))
	this.Color = string(randStringModels(r))
	this.Hash = string(randStringModels(r))
	this.HashVersion = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HashVersion *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDialog(r randyModels, easy bool) *Dialog {
	this := &Dialog{}
	this.Id = string(randStringModels(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage(r randyModels, easy bool) *Message {
	this := &Message{}
	this.DialogId = string(randStringModels(r))
	this.Text = string(randStringModels(r))
	this.SenderId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SenderId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedError(r randyModels, easy bool) *Error {
	this := &Error{}
	this.HasError = bool(bool(r.Intn(2) == 0))
	this.Error = string(randStringModels(r))
	this.ErrorCode = Error_ErrorCode([]int32{0}[r.Intn(1)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVkAuthRequest(r randyModels, easy bool) *VkAuthRequest {
	this := &VkAuthRequest{}
	this.VkToken = string(randStringModels(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVkAuthReply(r randyModels, easy bool) *VkAuthReply {
	this := &VkAuthReply{}
	if r.Intn(10) != 0 {
		this.User = NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Token = string(randStringModels(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserRequest(r randyModels, easy bool) *UserRequest {
	this := &UserRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserReply(r randyModels, easy bool) *UserReply {
	this := &UserReply{}
	if r.Intn(10) != 0 {
		this.User = NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRandomRequest(r randyModels, easy bool) *RandomRequest {
	this := &RandomRequest{}
	this.MinAge = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MinAge *= -1
	}
	this.MaxAge = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxAge *= -1
	}
	this.Sex = Sex([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUsersReply(r randyModels, easy bool) *UsersReply {
	this := &UsersReply{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Users = make([]*User, v3)
		for i := 0; i < v3; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVoteRequest(r randyModels, easy bool) *VoteRequest {
	this := &VoteRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVoteReply(r randyModels, easy bool) *VoteReply {
	this := &VoteReply{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyModels interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneModels(r randyModels) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringModels(r randyModels) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneModels(r)
	}
	return string(tmps)
}
func randUnrecognizedModels(r randyModels, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldModels(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldModels(dAtA []byte, r randyModels, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateModels(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateModels(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateModels(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateModels(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateModels(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateModels(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateModels(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovModels(uint64(m.Sex))
	}
	if m.GroupId != 0 {
		n += 1 + sovModels(uint64(m.GroupId))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.MessagesFromAll {
		n += 2
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Rating != 0 {
		n += 1 + sovModels(uint64(m.Rating))
	}
	if m.Age != 0 {
		n += 1 + sovModels(uint64(m.Age))
	}
	if m.VkId != 0 {
		n += 1 + sovModels(uint64(m.VkId))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *Image) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.HashVersion != 0 {
		n += 1 + sovModels(uint64(m.HashVersion))
	}
	return n
}

func (m *Dialog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.DialogId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.SenderId != 0 {
		n += 1 + sovModels(uint64(m.SenderId))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.HasError {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovModels(uint64(m.ErrorCode))
	}
	return n
}

func (m *VkAuthRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VkToken)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *VkAuthReply) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *UserRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovModels(uint64(m.UserId))
	}
	return n
}

func (m *UserReply) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *RandomRequest) Size() (n int) {
	var l int
	_ = l
	if m.MinAge != 0 {
		n += 1 + sovModels(uint64(m.MinAge))
	}
	if m.MaxAge != 0 {
		n += 1 + sovModels(uint64(m.MaxAge))
	}
	if m.Sex != 0 {
		n += 1 + sovModels(uint64(m.Sex))
	}
	return n
}

func (m *UsersReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *VoteRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovModels(uint64(m.UserId))
	}
	return n
}

func (m *VoteReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func init() { proto.RegisterFile("models.proto", fileDescriptorModels) }

var fileDescriptorModels = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0x8f, 0xe3, 0xfc, 0xb0, 0x9f, 0xdb, 0x6e, 0x3a, 0xed, 0x7e, 0xeb, 0xe6, 0xbb, 0xeb, 0x06,
	0xf3, 0x43, 0x51, 0x11, 0xc9, 0x12, 0x24, 0xee, 0xdd, 0x05, 0xa4, 0x48, 0x14, 0x24, 0xb7, 0x74,
	0xc5, 0xc9, 0x4c, 0xeb, 0x89, 0x63, 0x62, 0x7b, 0x82, 0xc7, 0x89, 0x52, 0x21, 0x24, 0xc4, 0x8d,
	0x1b, 0x12, 0x17, 0xfe, 0x04, 0xfe, 0x04, 0x8e, 0x1c, 0xf7, 0x88, 0xc4, 0x81, 0x1b, 0x6c, 0xb3,
	0xfc, 0x01, 0x5c, 0x90, 0xf6, 0x88, 0xe6, 0x8d, 0x9d, 0x26, 0x88, 0x15, 0x17, 0x2e, 0xed, 0x7b,
	0x9f, 0xf7, 0xe6, 0xbd, 0xcf, 0x7c, 0xde, 0x1b, 0x07, 0xb6, 0x12, 0x1e, 0xb0, 0x58, 0xf4, 0xa6,
	0x19, 0xcf, 0x39, 0x69, 0x28, 0xaf, 0x7d, 0x2f, 0xe4, 0x3c, 0x8c, 0x59, 0x9f, 0x4e, 0xa3, 0x3e,
	0x4d, 0x53, 0x9e, 0xd3, 0x3c, 0xe2, 0x69, 0x91, 0xd5, 0x7e, 0x23, 0x8c, 0xf2, 0xf1, 0xec, 0xb2,
	0x77, 0xc5, 0x93, 0x7e, 0xc8, 0x43, 0xde, 0x47, 0xf8, 0x72, 0x36, 0x42, 0x0f, 0x1d, 0xb4, 0x8a,
	0xf4, 0xa3, 0xa2, 0xd8, 0x2a, 0x2b, 0x8f, 0x12, 0x26, 0x72, 0x9a, 0x4c, 0x55, 0x82, 0xfb, 0x67,
	0x15, 0x6a, 0x1f, 0x09, 0x96, 0x91, 0x1d, 0xa8, 0x46, 0x81, 0xad, 0x75, 0xb4, 0xae, 0xee, 0x55,
	0xa3, 0x80, 0xdc, 0x07, 0x18, 0x45, 0x99, 0xc8, 0xfd, 0x94, 0x26, 0xcc, 0xae, 0x76, 0xb4, 0xae,
	0xe9, 0x99, 0x88, 0x7c, 0x40, 0x13, 0x46, 0xfe, 0x0f, 0x66, 0x4c, 0xcb, 0xa8, 0x8e, 0x51, 0x43,
	0x02, 0x18, 0xbc, 0x0f, 0xba, 0x60, 0x0b, 0xbb, 0xd6, 0xd1, 0xba, 0x3b, 0x03, 0xab, 0x57, 0x5c,
	0xf3, 0x8c, 0x2d, 0x3c, 0x89, 0x93, 0x43, 0x30, 0xc2, 0x8c, 0xcf, 0xa6, 0x7e, 0x14, 0xd8, 0x75,
	0x6c, 0xd8, 0x44, 0x7f, 0x18, 0x90, 0x57, 0xa1, 0x11, 0x25, 0x34, 0x64, 0xc2, 0x6e, 0x74, 0xf4,
	0xae, 0x35, 0xd8, 0x2e, 0x0f, 0x0f, 0x25, 0xea, 0x15, 0x41, 0x72, 0x0c, 0xbb, 0x09, 0x13, 0x42,
	0xda, 0xfe, 0x28, 0xe3, 0x89, 0x4f, 0xe3, 0xd8, 0x6e, 0x76, 0xb4, 0xae, 0xe1, 0xdd, 0x29, 0x03,
	0xef, 0x65, 0x3c, 0x39, 0x89, 0x63, 0xd2, 0x02, 0xfd, 0x32, 0xe2, 0xb6, 0x81, 0x1c, 0xa5, 0x49,
	0xfe, 0x07, 0x8d, 0x8c, 0xe6, 0x51, 0x1a, 0xda, 0x26, 0x76, 0x2f, 0x3c, 0x99, 0x49, 0x43, 0x66,
	0x03, 0x82, 0xd2, 0x24, 0x7b, 0x50, 0x9f, 0x4f, 0x24, 0x4d, 0x0b, 0xb1, 0xda, 0x7c, 0x32, 0x0c,
	0xc8, 0x23, 0x80, 0xab, 0x8c, 0xd1, 0x9c, 0x05, 0x3e, 0xcd, 0xed, 0xad, 0x8e, 0xd6, 0xb5, 0x06,
	0xed, 0x9e, 0x12, 0xba, 0x57, 0x0a, 0xdd, 0x3b, 0x2f, 0x85, 0x7e, 0x68, 0x3c, 0xf9, 0xf5, 0xa8,
	0xf2, 0xcd, 0x6f, 0x47, 0x9a, 0x67, 0x16, 0xe7, 0x4e, 0x72, 0x77, 0x04, 0x75, 0xbc, 0x92, 0x6c,
	0x3a, 0xcb, 0x62, 0x14, 0xde, 0xf4, 0xa4, 0x49, 0xf6, 0xa1, 0x7e, 0xc5, 0x63, 0x9e, 0x15, 0xa2,
	0x2b, 0x87, 0x10, 0xa8, 0x8d, 0xa9, 0x18, 0x17, 0x5a, 0xa3, 0x4d, 0x5e, 0x82, 0x2d, 0xf9, 0xdf,
	0x9f, 0xb3, 0x4c, 0x44, 0x3c, 0x45, 0xc1, 0x75, 0xcf, 0x92, 0xd8, 0x85, 0x82, 0x5c, 0x1b, 0x1a,
	0xef, 0x44, 0x34, 0xe6, 0xe1, 0xda, 0x80, 0x4d, 0x39, 0x60, 0xf7, 0x31, 0x34, 0x4f, 0x95, 0x54,
	0x72, 0x98, 0x01, 0x26, 0xf9, 0xab, 0x0c, 0x43, 0x01, 0xc3, 0x40, 0x36, 0xce, 0xd9, 0x22, 0x2f,
	0xd8, 0xa0, 0x2d, 0x0f, 0x08, 0x96, 0x06, 0x2c, 0x93, 0x07, 0x74, 0xec, 0x6a, 0x28, 0x60, 0x18,
	0xb8, 0x5f, 0x6b, 0x50, 0x7f, 0x37, 0xcb, 0x78, 0x26, 0xd3, 0xc6, 0x54, 0xf8, 0x4c, 0x3a, 0x58,
	0xd7, 0xf0, 0x8c, 0x31, 0x15, 0x2a, 0xb8, 0x0f, 0x75, 0x15, 0x28, 0xae, 0x89, 0x0e, 0x79, 0x1b,
	0x00, 0x0d, 0xff, 0x8a, 0x07, 0x6a, 0xb1, 0x76, 0x06, 0x07, 0xe5, 0x12, 0xe0, 0x41, 0xf5, 0xf7,
	0x11, 0x0f, 0x98, 0x67, 0xb2, 0xd2, 0x74, 0xef, 0x82, 0xb9, 0xc2, 0x89, 0x01, 0xb5, 0x90, 0xf3,
	0xa0, 0x55, 0x71, 0x8f, 0x61, 0xfb, 0x62, 0x72, 0x32, 0xcb, 0xc7, 0x1e, 0xfb, 0x6c, 0xc6, 0x44,
	0x2e, 0x77, 0x6f, 0x3e, 0xf1, 0x73, 0x3e, 0x61, 0x69, 0x71, 0xd3, 0xe6, 0x7c, 0x72, 0x2e, 0x5d,
	0xf7, 0x53, 0xb0, 0xca, 0xdc, 0x69, 0x7c, 0x4d, 0x3a, 0x50, 0x9b, 0x09, 0xa6, 0x78, 0x5b, 0x83,
	0xad, 0x92, 0x83, 0x7c, 0x2c, 0x1e, 0x46, 0xc8, 0xcb, 0xeb, 0x37, 0x58, 0xdb, 0x55, 0x24, 0x52,
	0x5e, 0x68, 0x1f, 0xea, 0xaa, 0x9b, 0x1a, 0x9c, 0x72, 0xdc, 0xd7, 0xc0, 0xc2, 0x42, 0x05, 0xab,
	0x03, 0x68, 0xca, 0x8a, 0xfe, 0xea, 0x05, 0x36, 0xa4, 0x3b, 0x0c, 0x5c, 0x0f, 0x4c, 0x95, 0xf7,
	0xdf, 0x31, 0x72, 0x3f, 0x81, 0x6d, 0x8f, 0xa6, 0x01, 0x4f, 0xd6, 0xba, 0x27, 0x51, 0xea, 0xcb,
	0xdd, 0x2f, 0xba, 0x27, 0x51, 0x7a, 0x12, 0x32, 0x0c, 0xd0, 0x05, 0x06, 0xaa, 0x45, 0x80, 0x2e,
	0x64, 0xa0, 0x78, 0xe0, 0xfa, 0x3f, 0x3f, 0x70, 0xf7, 0x01, 0x80, 0x24, 0x25, 0x14, 0x6d, 0x17,
	0xea, 0x92, 0x9c, 0xb0, 0x35, 0x7c, 0xd2, 0x9b, 0xbc, 0x55, 0xc8, 0x3d, 0x03, 0xeb, 0x82, 0xe7,
	0xec, 0x5f, 0xf5, 0x78, 0x1d, 0x0c, 0x99, 0x77, 0x7e, 0x3d, 0xc5, 0x29, 0xa7, 0x3c, 0x65, 0xad,
	0x0a, 0xb1, 0xa0, 0x19, 0x44, 0x22, 0x8e, 0x26, 0xac, 0xa5, 0x49, 0x18, 0xad, 0xaa, 0x6b, 0x81,
	0xa9, 0x8a, 0x4e, 0xe3, 0xeb, 0xe3, 0x43, 0xd0, 0xcf, 0xd8, 0x82, 0x98, 0x50, 0x7f, 0xcc, 0x13,
	0x9a, 0xb6, 0x2a, 0xa4, 0x09, 0xfa, 0x29, 0x4d, 0x5b, 0xda, 0xe0, 0x97, 0x2a, 0xd4, 0xde, 0xe7,
	0x73, 0x46, 0x4e, 0xa1, 0xa1, 0x36, 0x80, 0xdc, 0x2d, 0x49, 0x6e, 0x6c, 0x4f, 0x7b, 0xef, 0xef,
	0xf0, 0x34, 0xbe, 0x76, 0x0f, 0xbe, 0xfa, 0xf9, 0xf7, 0x6f, 0xab, 0xbb, 0xe4, 0x0e, 0x7e, 0xb2,
	0xe7, 0x6f, 0xf6, 0xe9, 0x2c, 0x1f, 0xf7, 0xe7, 0x13, 0xf2, 0x61, 0xf1, 0x69, 0xdd, 0xdb, 0xb8,
	0x71, 0x51, 0x6a, 0x77, 0x13, 0x94, 0x85, 0x8e, 0xb0, 0xd0, 0x21, 0x39, 0x28, 0x0b, 0xa1, 0x36,
	0xfd, 0xcf, 0x0b, 0x29, 0xbe, 0x20, 0x1f, 0x83, 0xa5, 0x26, 0x87, 0xea, 0xde, 0x92, 0xdc, 0x18,
	0x67, 0x9b, 0xac, 0x57, 0x16, 0x2f, 0x28, 0x3d, 0xe7, 0xf2, 0x93, 0x27, 0x7f, 0x17, 0x46, 0x51,
	0xcc, 0x04, 0x39, 0x87, 0x9a, 0xd4, 0xea, 0x96, 0xeb, 0xda, 0x38, 0x6e, 0xb9, 0xae, 0xe4, 0x74,
	0x5f, 0xc1, 0x82, 0x8e, 0x7b, 0xef, 0x05, 0x5c, 0x65, 0x03, 0xf6, 0xf0, 0xc1, 0xd3, 0x1b, 0x47,
	0xfb, 0xe3, 0xc6, 0xd1, 0x9e, 0xdf, 0x38, 0xda, 0xf7, 0x4b, 0x47, 0xfb, 0x61, 0xe9, 0x68, 0x3f,
	0x2e, 0x1d, 0xed, 0xc9, 0xd2, 0xa9, 0xfc, 0xb4, 0x74, 0x2a, 0x4f, 0x97, 0x8e, 0xf6, 0x7c, 0xe9,
	0x54, 0xbe, 0x7c, 0xe6, 0x54, 0xbe, 0x7b, 0xe6, 0x54, 0x2e, 0x1b, 0xf8, 0x01, 0x7d, 0xeb, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x62, 0xf4, 0xf4, 0x1c, 0x07, 0x00, 0x00,
}

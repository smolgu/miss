syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package models;

enum Sex {
  Woman = 0;
  Man = 1;
}

message User {
  int64 id = 1;
  string first_name = 2;
  string last_name = 3;
  Sex sex = 4;
  int64 group_id = 5;
  repeated Image images = 6;
  bool messages_from_all = 7;
  string bio = 8;
  int64 rating = 9;
  int64 age = 10;
  int64 vk_id = 11;

  // inject_tag: xorm:"jsonb notnull default '{}' 'published_date'"
  google.protobuf.Timestamp created_at = 12;// [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Image {
  string url = 1;
  string color = 2;
  string hash = 3;
  int64 hash_version = 4;
}

message Dialog {
  string id = 1;
}

message Message {
  string dialog_id = 1;
  string text = 2;
  int64 sender_id = 3;
}

message Error {
  bool has_error = 1;
  string error = 2;
  enum ErrorCode {
    good = 0;
  }
  ErrorCode error_code = 3;
}

message Vote {
  // @inject_tag: storm:"index"
  int64 target_user_id = 1;
  // @inject_tag: storm:"index"
  VoteType vote_type = 2;
  // @inject_tag: storm:"index"
  int64 voter_id = 3;
}

message VkAuthRequest {
  string vk_token = 1;
}

message VkAuthReply {
  User user = 1;
  Error error = 2;
  string token = 3;
}

message UserRequest {
  int64 user_id = 1;
}

message UserReply {
  User user = 1;
  Error error = 2;
}

message RandomRequest {
  int64 min_age = 1;
  int64 max_age = 2;
  Sex sex = 3;
  string token = 4;
}

message UsersReply {
  repeated User users = 1;
}


enum VoteType {
  none = 0;
  dislike = 1;
  like = 2;
}

message VoteRequest {
  int64 user_id = 1;
  string token = 2;
  VoteType vote_type = 3;
}

message VoteReply {
  bool matched = 1;
}

// The love service definition.
service Love {
  // Sends a greeting
  rpc VkAuth (VkAuthRequest) returns (VkAuthReply) {
    option (google.api.http) = {
      get: "/api/v1/auth/vk"
    };
  }
  // User return user info by their id
  rpc GetUser (UserRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }
  // User return list of users
  rpc RandomUsers (RandomRequest) returns (UsersReply) {
    option (google.api.http) = {
      get: "/api/v1/voting/profiles"
    };
  }
  // Vote vote for user
  rpc Vote (VoteRequest) returns (VoteReply) {
    option (google.api.http) = {
      post: "/api/v1/users/{user_id}/vote"
    };
  }

}

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package models;

enum Sex {
  Woman = 0;
  Man = 1;
}

enum Faculty {
  faculty_none = 0;
  FMF = 1;
  EGF = 2;
  FIP = 3;
  FF = 4;
  HGF = 5;
  FU = 6;
}

message TrainingDirection {
  int64 id = 1;
  string title = 2;
  string short_name_template = 3;
}

message Group {
  int64 id = 1;
  Faculty faculty = 2;
  int64 start_year = 3;
  int64 training_direction = 4;
}

message User {
  int64 id = 1;
  string first_name = 2;
  string last_name = 3;
  Sex sex = 4;
  int64 group_id = 5;
  repeated Image images = 6;
  bool messages_from_all = 7;
  string bio = 8;
  int64 rating = 9;
  int64 age = 10;
  int64 vk_id = 11;

  // @inject_tag: xorm:"jsonb notnull default '{}'::jsonb 'created_at'"
  google.protobuf.Timestamp created_at = 12;

  string avatar_url = 13;
}

message Image {
  string url = 1;
  string color = 2;
  string hash = 3;
  int64 hash_version = 4;
  float ratio = 5;
}

message Dialog {
  int64 parcipant_id = 1;
  Message last_message = 2;
  bool readed = 3;
}

message Message {
  int64 id = 1;
  string dialog_id = 2;
  string text = 3;
  int64 sender_id = 4;
  // @inject_tag: xorm:"jsonb notnull default '{}'::jsonb 'created_at'"
  google.protobuf.Timestamp created_at = 5;
}

message Vote {
  // @inject_tag: storm:"index"
  int64 target_user_id = 1;
  // @inject_tag: storm:"index"
  VoteType vote_type = 2;
  // @inject_tag: storm:"index"
  int64 voter_id = 3;
}

message VkAuthRequest {
  string vk_token = 1;
}

message VkAuthReply {
  User user = 1;
  string token = 3;
}

message UserRequest {
  int64 user_id = 1;
}

message UserReply {
  User user = 1;
}

message RandomRequest {
  int64 min_age = 1;
  int64 max_age = 2;
  Sex sex = 3;
  // @inject_tag: validate:"required"
  string token = 4;
}

message UsersReply {
  repeated User users = 1;
}


enum VoteType {
  vote_none = 0;
  dislike = 1;
  like = 2;
}

message VoteRequest {
  int64 user_id = 1;
  string token = 2;
  VoteType vote_type = 3;
}

message VoteReply {
  bool matched = 1;
}

message DialogsRequest {
  string token = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message DialogsReply {
  repeated Dialog dialogs = 1;
}

enum ObjectType {
  ObjectNone = 0;
  ObjectUser = 1;
  ObjectVote = 2;
  ObjectMessage = 3;
}

enum ErrorCode {
  ErrorNone = 0;
  NotFound = 1;
}

// The love service definition.
service Love {
  // Авторизация
  rpc VkAuth (VkAuthRequest) returns (VkAuthReply) {
    option (google.api.http) = {
      get: "/api/v1/auth/vk"
    };
  }
  // GetUser возвращает информацию о пользователе по его ID
  rpc GetUser (UserRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }
  // RandomUsers возвращает рандомные профили, которые ещё не лайкал текущий
  // юзер
  rpc RandomUsers (RandomRequest) returns (UsersReply) {
    option (google.api.http) = {
      get: "/api/v1/voting/profiles"
    };
  }
  // Vote vote for user
  rpc Vote (VoteRequest) returns (VoteReply) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/vote"
    };
  }
  // Vote vote for user
  rpc GetDialogs (DialogsRequest) returns (DialogsReply) {
    option (google.api.http) = {
      get: "/api/v1/dialogs"
    };
  }
}
